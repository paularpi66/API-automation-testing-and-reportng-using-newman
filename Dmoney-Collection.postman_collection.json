{
	"info": {
		"_postman_id": "9722890a-0802-4c47-a480-fa500dcf7d3b",
		"name": "Dmoney-Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18602654"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var token=jsonData.token;",
									"pm.collectionVariables.set(\"token\",token)",
									"",
									"pm.test(\"User can login successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).contains(\"Login successfully\")",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"admin@roadtocareer.net\",\n    \"password\":\"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong Password Admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User can't login by invalid credentials\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).contains(\"Password incorrect\")",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"admin@roadtocareer.net\",\n    \"password\":\"12345\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Admin login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User can't login by invalid credentials\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).contains(\"User not found\")",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\":\"adminn@roadtocareer.net\",\n    \"password\":\"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create Agent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomId=_.random(1000000,9999999)",
									"var prefix=\"0161\";",
									"",
									"var phoneNumber=prefix+randomId;",
									"",
									"pm.collectionVariables.set(\"phoneNumber\",phoneNumber)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the user is created\", function () {",
									"    pm.expect(jsonData.message).contains(\"User created\")",
									"});",
									"",
									"let id=jsonData.user.id;",
									"pm.collectionVariables.set(\"userId\",id);",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"name\":\"{{$randomFullName}}\",\n    \"email\":\"{{$randomEmail}}\",\n    \"password\":\"1234\",\n    \"phone_number\":\"{{phoneNumber}}\",\n    \"nid\":\"7686164\",\n    \"role\":\"Agent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't create Agent by invalid credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the agent can't be created\", function () {",
									"    pm.expect(jsonData.message).contains(\"User already exists\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"name\":\"{{$randomFullName}}\",\n    \"email\":\"Francisca99@hotmail.com\",\n    \"password\":\"1234\",\n    \"phone_number\":\"01615960379\",\n    \"nid\":\"7686164\",\n    \"role\":\"Agent\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomId=_.random(1000000,9999999)",
									"var prefix=\"0161\";",
									"",
									"var phoneNumberC1=prefix+randomId;",
									"",
									"pm.collectionVariables.set(\"phoneNumberC1\",phoneNumberC1)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the user is created\", function () {",
									"    pm.expect(jsonData.message).contains(\"User created\")",
									"});",
									"",
									"let id=jsonData.user.id;",
									"pm.collectionVariables.set(\"userIdC1\",id);",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"name\":\"{{$randomFullName}}\",\n    \"email\":\"{{$randomEmail}}\",\n    \"password\":\"1234\",\n    \"phone_number\":\"{{phoneNumberC1}}\",\n    \"nid\":\"7686164\",\n    \"role\":\"Customer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Customer 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var randomId=_.random(1000000,9999999)",
									"var prefix=\"0161\";",
									"",
									"var phoneNumberC2=prefix+randomId;",
									"",
									"pm.collectionVariables.set(\"phoneNumberC2\",phoneNumberC2)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the user is created\", function () {",
									"    pm.expect(jsonData.message).contains(\"User created\")",
									"});",
									"",
									"let id=jsonData.user.id;",
									"pm.collectionVariables.set(\"userIdC2\",id);",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"name\":\"{{$randomFullName}}\",\n    \"email\":\"{{$randomEmail}}\",\n    \"password\":\"1234\",\n    \"phone_number\":\"{{phoneNumberC2}}\",\n    \"nid\":\"7686164\",\n    \"role\":\"Customer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Can't create customer by same credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the agent can't be created\", function () {",
									"    pm.expect(jsonData.message).contains(\"User already exists\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"name\":\"{{$randomFullName}}\",\n    \"email\":\"Verlie_Mann96@yahoo.com\",\n    \"password\":\"1234\",\n    \"phone_number\":\"01618522082\",\n    \"nid\":\"7686164\",\n    \"role\":\"Customer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/user/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"user",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "Deposit to Agent from System user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the deposit is successful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Deposit successful\")",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"SYSTEM\",\n    \"to_account\":\"{{phoneNumber}}\",\n    \"amount\":5000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/deposit",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful deposit to Agent from System user if over 10k",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the deposit is unsuccessful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Minimum deposit amount 10 tk and maximum deposit amount 10000 tk\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"SYSTEM\",\n    \"to_account\":\"{{phoneNumber}}\",\n    \"amount\":11000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/deposit",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deposit to Customer 1 from Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the deposit is successful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Deposit successful\")",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumber}}\",\n    \"to_account\":\"{{phoneNumberC1}}\",\n    \"amount\":100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/deposit",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsuccessful Deposit to Customer 1 from Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the deposit is unsuccessful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Insufficient balance\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumber}}\",\n    \"to_account\":\"{{phoneNumberC1}}\",\n    \"amount\":50000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/deposit",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Agent Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the Agent balance is correct\", function () {",
									"    pm.expect(jsonData.message).contains(\"User balance\")",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/transaction/balance/{{phoneNumber}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phoneNumber}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Withdraw from Agent to Customer 1 is unsuccessful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the withdraw is unsuccessful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Customer can not withdraw money from another customer\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumber}}\",\n    \"to_account\":\"{{phoneNumberC1}}\",\n    \"amount\":100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/withdraw",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Agent can withdraw money from customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the withdraw is successful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Withdraw successful\")",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumberC1}}\",\n    \"to_account\":\"{{phoneNumber}}\",\n    \"amount\":50\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/withdraw",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Customer 1 Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the customer balance is correct\", function () {",
									"    pm.expect(jsonData.message).contains(\"User balance\")",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/transaction/balance/{{phoneNumberC1}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phoneNumberC1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send money to Customer 2 from Customer 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the send money is successful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Only Agent can deposit money\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumberC1}}\",\n    \"to_account\":\"{{phoneNumberC2}}\",\n    \"amount\":100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/deposit",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send money to Customer 2 from Agent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the send money to customer 2 is successful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Deposit successful\")",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumber}}\",\n    \"to_account\":\"{{phoneNumberC2}}\",\n    \"amount\":100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/deposit",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"deposit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Customer 2 Balance Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the customer balance is correct\", function () {",
									"    pm.expect(jsonData.message).contains(\"User balance\")",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/transaction/balance/{{phoneNumberC2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phoneNumberC2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment to merchant by customer 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the payment is successful\", function () {",
									"    pm.expect(jsonData.message).contains(\"Payment successful\")",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"{{phoneNumberC2}}\",\n    \"to_account\":\"01686606905\",\n    \"amount\":30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/payment",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Merchant can't make payment to customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the payment is unsuccessful\", function () {",
									"    pm.expect(jsonData.message).contains(\"From A/C should be customer or agent and To A/C should be merchant type\")",
									"});",
									"",
									"pm.test(\"Status code is 208\", function () {",
									"    pm.response.to.have.status(208);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"from_account\":\"01686606905\",\n    \"to_account\":\"{{phoneNumberC2}}\",\n    \"amount\":30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/payment",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"payment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Customer 2 Balance Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the customer balance is correct\", function () {",
									"    pm.expect(jsonData.message).contains(\"User balance\")",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/transaction/balance/{{phoneNumberC2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"balance",
								"{{phoneNumberC2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Customer 2 Statement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the customer statement is correct\", function () {",
									"    pm.expect(jsonData.message).contains(\"Transaction list\")",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/transaction/statement/{{phoneNumberC2}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"statement",
								"{{phoneNumberC2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Merchant Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check if the merchant balance is correct\", function () {",
									"    pm.expect(jsonData.message).contains(\"User balance\")",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-AUTH-SECRET-KEY",
								"value": "{{secretKey}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/transaction/balance/01686606905",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"balance",
								"01686606905"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGlmaWVyIjoiYWRtaW5Acm9hZHRvY2FyZWVyLm5ldCIsInBhc3N3b3JkIjoiMTIzNCIsImlhdCI6MTcwNzIyMzU1OCwiZXhwIjoxNzA3MjI3MTU4fQ.9eJ5QSSTSioiCAzPlGC5mLDhHvlCaVp8-ofvjBrgirs"
		},
		{
			"key": "baseURL",
			"value": "http://dmoney.roadtocareer.net",
			"type": "string"
		},
		{
			"key": "secretKey",
			"value": "ROADTOSDET",
			"type": "string"
		},
		{
			"key": "phoneNumber",
			"value": "01614410694"
		},
		{
			"key": "userId",
			"value": 46958
		},
		{
			"key": "phoneNumberC1",
			"value": "01615752289"
		},
		{
			"key": "userIdC1",
			"value": 46959
		},
		{
			"key": "phoneNumberC2",
			"value": "01618198616"
		},
		{
			"key": "userIdC2",
			"value": 46960
		}
	]
}